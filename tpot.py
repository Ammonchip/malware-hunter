import os
import time
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from tpot import TPOTClassifier

path = 'datasets'

dataset_files = []

for file_name in os.listdir(path):
    full_path = os.path.join(path,file_name)
    if os.path.isfile(full_path):
        dataset_files.append(file_name)

def formatar_tempo(tempo_segundos):
    horas = int(tempo_segundos / 3600)
    minutos = int((tempo_segundos % 3600) / 60)
    segundos = int(tempo_segundos % 60)
    return f"{horas:02d}:{minutos:02d}:{segundos:02d}"

def run_automl(dataset_file):
    dataset = pd.read_csv(dataset_file)
    X = dataset.drop('class', axis=1)
    y = dataset['class']
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=1)
    pipeline_optimizer = TPOTClassifier()
    #inicia a contagem do tempo de execução total da ferramenta
    start_time = time.time()
    pipeline_optimizer.fit(X_train, y_train)
    #para contagem 
    end_time = time.time()
    #calcula o tempo total e formata para hh:mm:ss
    total_time = formatar_tempo(end_time - start_time)

    #calcula o score do modelo com o dataset de teste
    score = pipeline_optimizer.score(X_test, y_test)
    pipeline_optimizer.export('tpot_exported_pipeline/'+dataset_file[9:-4]+'/'+dataset_file[9:-4]+'.py')
    #organiza tempo de execucao, melhor modelo com parametros e avaliacao em um dicionario para exportacao em formato csv
    sumario = {
        'tempo_de_execucao' : total_time,
        'best_model_score' : score
    }

    pd.DataFrame(sumario)
    #exporta csv com resumo do melhor modelo
    sumario.to_csv('tpot_exported_pipeline/'+dataset_file[9:-4]+'/'+dataset_file[9:-4]+'-summary.csv', index=False)

    

for dataset_file in dataset_files:
    run_automl('datasets/' + dataset_file)