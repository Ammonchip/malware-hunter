import os
import time
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from autogluon.tabular import TabularDataset, TabularPredictor

path = 'datasets'

dataset_files = []

for file_name in os.listdir(path):
    full_path = os.path.join(path,file_name)
    if os.path.isfile(full_path):
        dataset_files.append(file_name)

def formatar_tempo(tempo_segundos):
    horas = int(tempo_segundos / 3600)
    minutos = int((tempo_segundos % 3600) / 60)
    segundos = int(tempo_segundos % 60)
    return f"{horas:02d}:{minutos:02d}:{segundos:02d}"

def run_automl(dataset_file):
    dataset = pd.read_csv(dataset_file)
    X = dataset.drop('class', axis=1)
    y = dataset['class']
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=1)
    #inicia a contagem do tempo de execução total da ferramenta
    start_time = time.time()
    predictor = TabularPredictor(label='class', path='AutogluonModels/ag-'+dataset_file[:-4]).fit(X_train.join(y_train))
    #para contagem 
    end_time = time.time()
    #calcula o tempo total e formata para hh:mm:ss
    total_time = formatar_tempo(end_time - start_time)

    #faz a predição com o dataset de teste usando o melhor modelo
    y_pred = predictor.predict(X_test.join(y_test))
    #avalia a predição e guarda em um dicionário
    prediction_evaluation = predictor.evaluate_predictions(y_true=y_test, y_pred=y_pred, auxiliary_metrics=True)
    #extrai parametros do melhor modelo encontrado
    fit_sumary = predictor.fit_summary(verbosity=0)
    #organiza tempo de execucao, melhor modelo com parametros e avaliacao em um dicionario para exportacao em formato csv
    sumario = {
        'tempo_de_execucao' : total_time,
        'best_model' : predictor.get_model_best(),
        'best_model_params' : fit_sumary['model_hyperparams'][fit_sumary['model_best']],
        'best_model_evaluation' : prediction_evaluation
    }

    pd.DataFrame(sumario)
    #exporta csv com resumo do melhor modelo
    sumario.to_csv('AutogluonModels/ag-'+dataset_file[:-4]+'/summary-'+dataset_file[:-4]+'.csv', index=False)
    #salva uma imagem com os modelos usados no ensemble
    predictor.plot_ensemble_model()

for dataset_file in dataset_files:
    run_automl('datasets/' + dataset_file)